// Syncfusion-based Risk Table placeholder
// Replace this with a full implementation using Syncfusion DataGrid
import React, { useState } from 'react';
import { GridComponent, ColumnsDirective, ColumnDirective, Inject, Page, Sort, Filter, Toolbar } from '@syncfusion/ej2-react-grids';
import { useRisks } from './useRisks';
import { Button } from '@/components/ui/button';
import { type Risk, type InsertIssue } from '@shared/schema';
import DeleteConfirmDialog from './DeleteConfirmDialog';

// Default mapping from Risk to InsertIssue
function mapRiskToIssue(risk: Risk): InsertIssue {
  return {
    priorityRank: risk.priorityRank,
    uniqueId: '', // Should be generated by backend or use a uuid
    riskId: risk.riskId,
    issueDate: new Date().toISOString().split('T')[0], // today as YYYY-MM-DD
    raisedBy: risk.raisedBy,
    ownedBy: risk.ownedBy,
    issueEvent: risk.riskEvent,
    issueEffect: risk.riskEffect,
    resolution: '',
    category: risk.riskCategory,
    impact: risk.impact,
    status: 'Open',
    assignedTo: risk.ownedBy,
    closedDate: '',
    comments: risk.comment || '',
    criticalDateId: risk.criticalDateId,
    dueDate: risk.dueDate || '',
    includeCost: risk.includeCost,
    optimisticCost: risk.optimisticCost,
    mostLikelyCost: risk.mostLikelyCost,
    pessimisticCost: risk.pessimisticCost,
    expectedCost: risk.expectedCost,
    emv: risk.emv,
    costAllocationModel: risk.costAllocationModel,
    contractDetails: risk.contractDetails,
    dayType: risk.dayType,
    optimisticDuration: risk.optimisticDuration,
    mostLikelyDuration: risk.mostLikelyDuration,
    pessimisticDuration: risk.pessimisticDuration,
    expectedDuration: risk.expectedDuration,
    calculatedBusinessDays: risk.calculatedBusinessDays,
    calculatedCalendarDays: risk.calculatedCalendarDays,
    probabilityAdjustedDuration: risk.probabilityAdjustedDuration,
    delayDuration: risk.delayDuration,
    delayClassification: risk.delayClassification,
    criticalPathImpact: risk.criticalPathImpact,
    floatConsumption: risk.floatConsumption,
    projectId: risk.projectId,
  };
}

const SyncfusionRiskTable = () => {
  const {
    risks,
    isLoading,
    updateRisk,
    deleteRisk,
    convertRiskToIssue,
    isUpdating,
    isDeleting,
    isConverting,
  } = useRisks();

  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);
  const [selectedRisk, setSelectedRisk] = useState<Risk | null>(null);

  const handleDeleteClick = (risk: Risk) => {
    setSelectedRisk(risk);
    setDeleteDialogOpen(true);
  };
  const handleDeleteConfirm = () => {
    if (selectedRisk) deleteRisk(selectedRisk.id);
    setDeleteDialogOpen(false);
    setSelectedRisk(null);
  };
  const handleDeleteClose = () => {
    setDeleteDialogOpen(false);
    setSelectedRisk(null);
  };

  // Action column template
  const ActionTemplate = (props: Risk) => (
    <div className="flex gap-2">
      <Button size="sm" onClick={() => updateRisk({ id: props.id, data: {} })} disabled={isUpdating}>Edit</Button>
      <Button size="sm" variant="destructive" onClick={() => handleDeleteClick(props)} disabled={isDeleting}>Delete</Button>
      <Button size="sm" variant="secondary" onClick={() => convertRiskToIssue({ risk: props, issuePayload: mapRiskToIssue(props) })} disabled={isConverting}>Convert</Button>
    </div>
  );

  return (
    <div className="bg-white rounded shadow p-2">
      <GridComponent
        dataSource={risks}
        allowPaging={true}
        allowSorting={true}
        allowFiltering={true}
        toolbar={['Search']}
        pageSettings={{ pageSize: 10 }}
        height={400}
      >
        <ColumnsDirective>
          <ColumnDirective field="riskId" headerText="Risk ID" width="100" textAlign="Left" />
          <ColumnDirective field="riskCategory" headerText="Category" width="120" />
          <ColumnDirective field="riskEvent" headerText="Event" width="200" />
          <ColumnDirective field="ownedBy" headerText="Owner" width="120" />
          <ColumnDirective field="probability" headerText="Probability" width="100" />
          <ColumnDirective field="impact" headerText="Impact" width="100" />
          <ColumnDirective field="riskRating" headerText="Rating" width="100" />
          <ColumnDirective field="riskStatus" headerText="Status" width="100" />
          <ColumnDirective headerText="Actions" width="220" template={ActionTemplate} />
        </ColumnsDirective>
        <Inject services={[Page, Sort, Filter, Toolbar]} />
      </GridComponent>
      <DeleteConfirmDialog
        open={deleteDialogOpen}
        onClose={handleDeleteClose}
        onConfirm={handleDeleteConfirm}
        isDeleting={isDeleting}
        title="Delete Risk?"
        description={`Are you sure you want to delete risk "${selectedRisk?.riskId ?? ''}"? This action cannot be undone.`}
      />
    </div>
  );
};

export default SyncfusionRiskTable;
